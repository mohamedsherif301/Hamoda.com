/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Lenovo
 */
public class ProjectOperatingSystems extends javax.swing.JFrame {
    DefaultTableModel model ;
       int rowCount = 0;
       
    
    

    /**
     * Creates new form ProjectOperatingSystems
     */
    public ProjectOperatingSystems() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        processId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cpuTime = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        AlgorithmsList = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(51, 51, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "ADD Process\n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe Print", 1, 14))); // NOI18N
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel3.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Num OF Processes");

        processId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        processId.setText("1");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("CPU Time");

        cpuTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(processId, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(cpuTime, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(processId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(cpuTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 32)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("CPU Scheduler");

        AlgorithmsList.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AlgorithmsList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "SJF", "Round Robin", "Priority Scheduling" }));
        AlgorithmsList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlgorithmsListActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Select Algorithm");

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Add Process");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setText("Run Algorithm");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        Table.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.Process", "CPU.Time", "Process priority", "Time quantum"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(Table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton1)
                                            .addComponent(AlgorithmsList, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(90, 90, 90)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AlgorithmsList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(clear))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AlgorithmsListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlgorithmsListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AlgorithmsListActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         
      model = (DefaultTableModel) Table.getModel();
        Add_To_Table();
        ClearForms();
        int nextProcessNumber = Integer.parseInt(processId.getText().toString());
        nextProcessNumber++;
        processId.setText(nextProcessNumber+"");
 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
           rowCount = model.getRowCount();
           int  burstTimes[] = new int[rowCount];
           int  waitingTimes[] = new int[rowCount];
           int[] BackupburstTime = new int[rowCount];
           int turnAroundTimes[] = new int[rowCount];
    if(AlgorithmsList.getSelectedItem().equals("FCFS")){
    
//    Alogrithm frist Come frist Serve 
            for (int i = 0; i < rowCount; i++) {
                          Object[] row = new Object[4];
                          row[0] = model.getValueAt(i, 0); // ID
                          row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
                          row[2] = 0; // Waiting Time (تعيين مبدئيًا بـ 0)
                          row[3] = 0; // Turnaround Time (تعيين مبدئيًا بـ 0)

                      }
            for (int i = 0; i < rowCount; i++) {
               
                         burstTimes[i] = Integer.parseInt(model.getValueAt(i, 1).toString());
          
                      }
            
             waitingTimes[0] = 0;
            for (int i = 1; i < rowCount; i++) {
                waitingTimes[i] = waitingTimes[i - 1] + burstTimes[i - 1];
                       
                }
            
               for (int i = 0; i < rowCount; i++) {
                turnAroundTimes[i] = waitingTimes[i] + burstTimes[i];
            }
               
                   Add_Two_ColumnWT();
             
             
                  setValueinTableWaitingTime(waitingTimes);
                  setValueinTableTrunAroundTime(turnAroundTimes);
                  
              ShowWaitingAndTurnAround_Time("FCFS");
                    
            
    }
    else if(AlgorithmsList.getSelectedItem().equals("SJF")){
         List<Object[]> tableData = new ArrayList<>();

    // **استخراج البيانات من الجدول**
                for (int i = 0; i < rowCount; i++) {
                    Object[] row = new Object[6];
                    row[0] = model.getValueAt(i, 0); // ID
                    row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
                    row[2] = 0; // Proprity Process (تعيين مبدئيًا بـ 0)
                    row[3] = 0; // Quntam Time (تعيين مبدئيًا بـ 0)
                    row[4] = 0; // WaitTime 
                    row[5] = 0;// TurnAround Time
                    tableData.add(row);
                }

//                Sorting Table Based on Burst Time 
         tableData.sort((a, b) -> Integer.compare((int) a[1], (int) b[1]));
//         Column (Waiting Time , TerunAround Time)
         Add_Two_ColumnWT();
         
         
         
          int currentTime = 0; // الوقت الحالي
    for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);
     
        // حساب Waiting Time
        int burstTime = (int) row[1];
        row[4] = currentTime; // Waiting Time = الوقت الحالي قبل بدء العملية

        // حساب Turnaround Time
        row[5] = (int) row[4] + burstTime; // Turnaround Time = Waiting Time + Burst Time

        // تحديث الوقت الحالي
        currentTime += burstTime;
    }
    
           AssignValueLists(tableData,waitingTimes,turnAroundTimes);
    
          UpdateModel(tableData);
         ShowWaitingAndTurnAround_Time("FJS");


    }
    else if(AlgorithmsList.getSelectedItem().equals("Priority Scheduling")){
        //    Alogrithm  Priority Process 
     

        AddinTwoCloumPQ(2,"Priority");
        Add_Two_ColumnWT();
           List<Object[]> tableData = new ArrayList<>();
         for (int i = 0; i < rowCount; i++) {
                    Object[] row = new Object[6];
                    row[0] = model.getValueAt(i, 0); // ID
                    row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
                    row[2] = Integer.parseInt(model.getValueAt(i, 2).toString()); // Proprity Process (تعيين مبدئيًا بـ 0)
                    row[3] = 0; // Quntam Time (تعيين مبدئيًا بـ 0)
                    row[4] = 0; // WaitTime 
                    row[5] = 0;// TurnAround Time
                    tableData.add(row);
                }

//                Sorting Table Based on Priority Process
         tableData.sort((a, b) -> Integer.compare((int) a[2], (int) b[2]));
         
           int currentTime = 0; // الوقت الحالي
    for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);

        // حساب Waiting Time
        int burstTime = (int) row[1];
        row[4] = currentTime; // Waiting Time = الوقت الحالي قبل بدء العملية

        // حساب Turnaround Time
        row[5] = (int) row[4] + burstTime; // Turnaround Time = Waiting Time + Burst Time

        // تحديث الوقت الحالي
        currentTime += burstTime;
    }
    
    UpdateModel(tableData);
    
    
    ShowWaitingAndTurnAround_Time("PS");
    

    } 
   
         else if (AlgorithmsList.getSelectedItem().equals("Round Robin")) {
    rowCount = model.getRowCount();
   Add_Two_ColumnWT();
   
    for(int i=0 ; i< rowCount ;i++){
        int currentTimeBust = Integer.parseInt(model.getValueAt(i, 1).toString()) ;
        BackupburstTime[i] = currentTimeBust;
        
    }
    // **الحصول على Quantum Time مرة واحدة فقط**
    String quantumInput = JOptionPane.showInputDialog(this, 
        "Input Quantum Time for all processes:", 
        "Quantum Time Input", 
        JOptionPane.QUESTION_MESSAGE);

    // التحقق من صحة الإدخال
    if (quantumInput == null || quantumInput.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Quantum Time is required!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int quantumTime;
    try {
        quantumTime = Integer.parseInt(quantumInput);
        if (quantumTime <= 0) {
            throw new NumberFormatException("Quantum Time must be positive.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter a valid positive integer for Quantum Time.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // **استخراج بيانات الجدول**
    List<Object[]> tableData = new ArrayList<>();
    for (int i = 0; i < rowCount; i++) {
        Object[] row = new Object[6];
        row[0] = model.getValueAt(i, 0); // ID
        row[1] = Integer.parseInt(model.getValueAt(i, 1).toString()); // Burst Time
        row[2] = 0; // Priority Process 
        row[3] = Integer.parseInt(model.getValueAt(i, 3).toString()); // Quantam Time
        row[4] = 0;
        row[5]= 0;
        
        tableData.add(row);
    }

    // **تنفيذ خوارزمية Round Robin**
    int currentTime = 0;
    boolean allProcessesComplete;
    do {
        allProcessesComplete = true;

        for (Object[] process : tableData) {
            int remainingTime = (int) process[1]; // based on Burst Time

            if (remainingTime > 0) {
                allProcessesComplete = false;

                if (remainingTime > quantumTime) {
                    currentTime += quantumTime;
                    process[1] = remainingTime - quantumTime; // تحديث Remaining Time
                } else {
                    currentTime += remainingTime;
                    process[1] = 0; // العملية انتهت
                    process[5] = currentTime; // Turnaround Time
                    process[4] = (int) process[5] - ((int) process[1] + remainingTime); // Waiting Time
                }
            }
        }
    } while (!allProcessesComplete);

    // **إعادة تعبئة الجدول بالقيم المحسوبة**
    for (int i = 0; i < tableData.size(); i++) {
        Object[] process = tableData.get(i);
        model.setValueAt(process[0], i, 0); // ID 
        model.setValueAt( BackupburstTime[i], i, 1); // Burst Time
        model.setValueAt((int) process[2], i, 2); // Waiting Time
        model.setValueAt(quantumTime, i, 3); // Turnaround Time
        model.setValueAt((int) process[4], i, 4); // Waiting Time
        model.setValueAt((int) process[5], i,5);// TrunAround Time
        
    }
    

    // **حساب المتوسطات**
    double totalWaitingTime = 0, totalTurnAroundTime = 0;
    for (int i = 0; i < rowCount; i++) {
        totalWaitingTime += Integer.parseInt(model.getValueAt(i, 4).toString());
        totalTurnAroundTime += Integer.parseInt(model.getValueAt(i, 5).toString());
    }

    double averageWaitingTime = totalWaitingTime / rowCount;
    double averageTurnAroundTime = totalTurnAroundTime / rowCount;

    // **عرض النتائج**
    JOptionPane.showMessageDialog(this, 
        "Round Robin (RR) with Quantum Time " + quantumTime + ":\n " +
        "Average Waiting Time: " + averageWaitingTime + "\n" +
        "Average Turnaround Time: " + averageTurnAroundTime, 
        "Results", JOptionPane.INFORMATION_MESSAGE);
}
     
                
                           
    }//GEN-LAST:event_jButton2ActionPerformed
      
    
    
    
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      
       DeleteRow();
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
      ClearForms();
      Table.removeAll();
      model.removeTableModelListener(Table);
    }//GEN-LAST:event_clearActionPerformed
//    Clear value of  TextField 
    private void ClearForms(){

         cpuTime.setText("");
         
}
//    Check CPU Time Is vaild Or Not 
    private boolean checkCPUTime(){
    if(cpuTime.getText() == "" ){
        return false;
         }
    else {
        return true ;
        }
 }
//    Add To Table 
private  void Add_To_Table(){
  
  model.addRow(new Object[]{"P"+processId.getText(),cpuTime.getText(),0,0});
} 
//    Check Process Number Is vaild Or Not 
private boolean checkProcessNumber(){
    if(processId.getText() == "" ){
        return false ;
        
    }
    else {
        return true ;
     
    }
}

private void DeleteRow(){
     int row = Table.getSelectedRow();
         model.removeRow(row);
}

private void ShowWaitingAndTurnAround_Time(String Algorithm){
     double totalWaitingTime = 0, totalTurnAroundTime = 0;
            for (int i = 0; i < rowCount; i++) {
                totalWaitingTime += Integer.parseInt(model.getValueAt(i, 4).toString());
                totalTurnAroundTime += Integer.parseInt(model.getValueAt(i, 5).toString());
            }

            double averageWaitingTime = totalWaitingTime / rowCount;
            double averageTurnAroundTime = totalTurnAroundTime / rowCount;

            // عرض المتوسطات
            JOptionPane.showMessageDialog(this, 
                "In "+Algorithm+" Average Waiting Time: " + averageWaitingTime + 
                "\nAverage Turnaround Time: " + averageTurnAroundTime, 
                "Results", JOptionPane.INFORMATION_MESSAGE);
}

private void setValueinTableWaitingTime(int waitingTimes[]){
         for (int i = 0; i < rowCount; i++) {
                model.setValueAt(waitingTimes[i], i, 4);
            }
}
private void setValueinTableTrunAroundTime(int turnAroundTimes[]){
         for (int i = 0; i < rowCount; i++) {
                model.setValueAt(turnAroundTimes[i], i, 5);
            }
}

private void Add_Two_ColumnWT(){
                    model.addColumn("Waiting Time ");
                    model.addColumn("TrunAround Time");
}
private void AssignValueLists(List<Object[]> tableData,int []waitingTimes,int []turnAroundTimes){
    for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);
       waitingTimes[i] =Integer.parseInt(row[4].toString()) ;
       turnAroundTimes[i] = Integer.parseInt(row[5].toString());
       
        
    }
}
private void UpdateModel(List<Object []> tableData ){
         for (int i = 0; i < tableData.size(); i++) {
        Object[] row = tableData.get(i);
        model.setValueAt(row[0], i, 0); // Process Number Update at Table
        model.setValueAt(row[1], i, 1); // Brust Time Update at Table
        model.setValueAt(row[2], i, 2); // Priority Process Update at Table
        model.setValueAt(row[3], i, 3);//  Qunam Time Update at Table
        model.setValueAt(row[4], i, 4);//  Waiting Time Update at Table
        model.setValueAt(row[5], i, 5);//  TrunAround Time Update At Table 
        
    }
}
private void AddinTwoCloumPQ(int columnNumber,String ColumnName){
//    if Entering Qaunam Time in Algorithm => Round Robin 
    if(columnNumber == 3){
         String PriorityInput = JOptionPane.showInputDialog(this, 
            "Input "+ColumnName+" Schaduling for process  :", 
            "Priority Schaduling Input", 
            JOptionPane.QUESTION_MESSAGE);

        // التحقق من صحة الإدخال
        if (PriorityInput == null || PriorityInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Quantum Time is required for each process!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int PriorityProcess = Integer.parseInt(PriorityInput);
            if (PriorityProcess <= 0) {
                
                throw new NumberFormatException("Quantum Time must be positive.");
            }
            // تحديث قيمة العمود في الجدول
            for (int i=0 ; i< model.getRowCount(); i++){
                            model.setValueAt(PriorityProcess, i, columnNumber);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid positive integer for Quantum Time.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }else{
          for (int i = 0; i < rowCount; i++) {
        String PriorityInput = JOptionPane.showInputDialog(this, 
            "Input "+ColumnName+" Schaduling for process " + (i + 1) + ":", 
            "Priority Schaduling Input", 
            JOptionPane.QUESTION_MESSAGE);

        // التحقق من صحة الإدخال
        if (PriorityInput == null || PriorityInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Quantum Time is required for each process!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int PriorityProcess = Integer.parseInt(PriorityInput);
            if (PriorityProcess <= 0) {
                throw new NumberFormatException("Quantum Time must be positive.");
            }
            // تحديث قيمة العمود في الجدول
            model.setValueAt(PriorityProcess, i, columnNumber);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid positive integer for Quantum Time.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }
    }
    
   
}


    public static void main(String args[]) {
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProjectOperatingSystems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProjectOperatingSystems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProjectOperatingSystems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProjectOperatingSystems.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProjectOperatingSystems().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AlgorithmsList;
    private javax.swing.JTable Table;
    private javax.swing.JButton clear;
    private javax.swing.JTextField cpuTime;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField processId;
    // End of variables declaration//GEN-END:variables
}
